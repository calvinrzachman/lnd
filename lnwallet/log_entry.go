package lnwallet

import (
	"crypto/sha256"

	"github.com/btcsuite/btcd/btcec/v2/ecdsa"
	"github.com/lightningnetwork/lnd/channeldb"
	"github.com/lightningnetwork/lnd/channeldb/models"
	"github.com/lightningnetwork/lnd/lntypes"
	"github.com/lightningnetwork/lnd/lnwallet/chainfee"
	"github.com/lightningnetwork/lnd/lnwire"
)

// LogEntry...
type LogEntry interface {
	LogIndex() uint64

	IsForwarded() bool

	MarkForwarded()
}

type ChildLogEntry interface {
	LogEntry

	ParentIndex() uint64

	RemoveHeightLocal() uint64

	RemoveHeightRemote() uint64

	SetRemoveHeightRemote(uint64)

	SetRemoveHeightLocal(uint64)
}

type openCircuitDesc struct {
	// Forwarded...
	Forwarded bool

	// SourceRef points to an Add update in a forwarding package owned by
	// this channel.
	//
	// NOTE: This field will only be populated if EntryType is Fail or
	// Settle.
	SourceRef *channeldb.AddRef

	// OpenCircuitKey references the incoming Chan/HTLC ID of an Add HTLC
	// packet delivered by the switch.
	//
	// NOTE: This field is only populated for payment descriptors in the
	// *local* update log, and if the Add packet was delivered by the
	// switch.
	OpenCircuitKey *models.CircuitKey

	// addCommitHeight[Remote|Local] encodes the height of the commitment
	// which included this HTLC on either the remote or local commitment
	// chain. This value is used to determine when an HTLC is fully
	// "locked-in".
	addCommitHeightRemote uint64
	addCommitHeightLocal  uint64
}

func (o *openCircuitDesc) AddHeightRemote() uint64 {
	return o.addCommitHeightRemote
}

func (o *openCircuitDesc) AddHeightLocal() uint64 {
	return o.addCommitHeightLocal
}

type transactionIndex struct {
	// localOutputIndex is the output index of this HTLc output in the
	// commitment transaction of the local node.
	//
	// NOTE: If the output is dust from the PoV of the local commitment
	// chain, then this value will be -1.
	localOutputIndex int32

	// remoteOutputIndex is the output index of this HTLC output in the
	// commitment transaction of the remote node.
	//
	// NOTE: If the output is dust from the PoV of the remote commitment
	// chain, then this value will be -1.
	remoteOutputIndex int32
}

type commitScripts struct {
	// [our|their|]PkScript are the raw public key scripts that encodes the
	// redemption rules for this particular HTLC. These fields will only be
	// populated iff the EntryType of this PaymentDescriptor is Add.
	// ourPkScript is the ourPkScript from the context of our local
	// commitment chain. theirPkScript is the latest pkScript from the
	// context of the remote commitment chain.
	//
	// NOTE: These values may change within the logs themselves, however,
	// they'll stay consistent within the commitment chain entries
	// themselves.
	ourPkScript        []byte
	ourWitnessScript   []byte
	theirPkScript      []byte
	theirWitnessScript []byte
}

type AddLogEntry struct {
	// RHash is the payment hash for this HTLC. The HTLC can be settled iff
	// the preimage to this hash is presented.
	RHash PaymentHash

	// Timeout is the absolute timeout in blocks, after which this HTLC
	// expires.
	Timeout uint32

	// Amount is the HTLC amount in milli-satoshis.
	Amount lnwire.MilliSatoshi

	// LogEntryIndex is the log entry number that his HTLC update has
	// within the log. Depending on if IsIncoming is true, this is either
	// an entry the remote party added, or one that we added locally.
	LogEntryIndex uint64

	// HtlcIndex is the index within the main update log for this HTLC.
	// Entries within the log of type Add will have this field populated,
	// as other entries will point to the entry via this counter.
	HtlcIndex uint64

	// sig is the signature for the second-level HTLC transaction that
	// spends the version of this HTLC on the commitment transaction of the
	// local node. This signature is generated by the remote node and
	// stored by the local node in the case that local node needs to
	// broadcast their commitment transaction.
	sig *ecdsa.Signature

	// OnionBlob is an opaque blob which is used to complete multi-hop
	// routing.
	//
	// NOTE: Populated only on add payment descriptor entry types.
	OnionBlob []byte

	openCircuitDesc

	transactionIndex

	commitScripts
}

func (a *AddLogEntry) LogIndex() uint64 {
	return a.LogEntryIndex
}

func (a *AddLogEntry) ParentIndex() uint64 {
	return 0
}

func (a *AddLogEntry) IsForwarded() bool {
	return a.Forwarded
}

func (a *AddLogEntry) MarkForwarded() {
	a.Forwarded = true
}

var _ LogEntry = (*AddLogEntry)(nil)

type closeCircuitDesc struct {
	// SourceRef points to an Add update in a forwarding package owned by
	// this channel.
	//
	// NOTE: This field will only be populated if EntryType is Fail or
	// Settle.
	SourceRef *channeldb.AddRef

	// DestRef points to a Fail/Settle update in another link's forwarding
	// package.
	//
	// NOTE: This field will only be populated if EntryType is Fail or
	// Settle, and the forwarded Add successfully included in an outgoing
	// link's commitment txn.
	DestRef *channeldb.SettleFailRef

	// ClosedCircuitKey references the incoming Chan/HTLC ID of the Add HTLC
	// that opened the circuit.
	//
	// NOTE: This field is only populated for payment descriptors in the
	// *local* update log, and if settle/fails have a committed circuit in
	// the circuit map.
	ClosedCircuitKey *models.CircuitKey

	// Forwarded...
	Forwarded bool

	// ParentIndex is the HTLC index of the entry that this update settles or
	// times out.
	ParentIndex uint64

	// removeCommitHeight[Remote|Local] encodes the height of the
	// commitment which removed the parent pointer of this
	// PaymentDescriptor either due to a timeout or a settle. Once both
	// these heights are below the tail of both chains, the log entries can
	// safely be removed.
	removeCommitHeightRemote uint64
	removeCommitHeightLocal  uint64
}

type SettleLogEntry struct {
	// Amount is the HTLC amount in milli-satoshis.
	Amount lnwire.MilliSatoshi

	// RPreimage is the preimage that settles the HTLC pointed to within the
	// log by the ParentIndex.
	RPreimage lntypes.Preimage

	// LogEntryIndex is the log entry number that his HTLC update has
	// within the log. Depending on if IsIncoming is true, this is either
	// an entry the remote party added, or one that we added locally.
	LogEntryIndex uint64

	closeCircuitDesc
}

func (s *SettleLogEntry) LogIndex() uint64 {
	return s.LogEntryIndex
}

func (s *SettleLogEntry) ParentIndex() uint64 {
	return s.closeCircuitDesc.ParentIndex
}

func (s *SettleLogEntry) IsForwarded() bool {
	return s.Forwarded
}

func (s *SettleLogEntry) MarkForwarded() {
	s.Forwarded = true
}

func (s *SettleLogEntry) RemoveHeightLocal() uint64 {
	return s.removeCommitHeightLocal
}

func (s *SettleLogEntry) RemoveHeightRemote() uint64 {
	return s.removeCommitHeightRemote
}

func (s *SettleLogEntry) SetRemoveHeightRemote(height uint64) {
	s.removeCommitHeightRemote = height
}

func (f *SettleLogEntry) SetRemoveHeightLocal(height uint64) {
	f.removeCommitHeightLocal = height
}

var _ LogEntry = (*SettleLogEntry)(nil)
var _ ChildLogEntry = (*FailLogEntry)(nil)

type FailLogEntry struct {
	// FailReason stores the reason why a particular payment was canceled.
	FailReason []byte

	// LogEntryIndex is the log entry number that his HTLC update has
	// within the log. Depending on if IsIncoming is true, this is either
	// an entry the remote party added, or one that we added locally.
	LogEntryIndex uint64

	closeCircuitDesc
}

func (f *FailLogEntry) LogIndex() uint64 {
	return f.LogEntryIndex
}

func (f *FailLogEntry) ParentIndex() uint64 {
	return f.closeCircuitDesc.ParentIndex
}

func (f *FailLogEntry) IsForwarded() bool {
	return f.Forwarded
}

func (f *FailLogEntry) MarkForwarded() {
	f.Forwarded = true
}

func (f *FailLogEntry) RemoveHeightLocal() uint64 {
	return f.removeCommitHeightLocal
}

func (f *FailLogEntry) RemoveHeightRemote() uint64 {
	return f.removeCommitHeightRemote
}

func (f *FailLogEntry) SetRemoveHeightRemote(height uint64) {
	f.removeCommitHeightRemote = height
}

func (f *FailLogEntry) SetRemoveHeightLocal(height uint64) {
	f.removeCommitHeightLocal = height
}

var _ LogEntry = (*FailLogEntry)(nil)
var _ ChildLogEntry = (*FailLogEntry)(nil)

type failMalformedEntry struct {
	// ShaOnionBlob is a sha of the onion blob.
	ShaOnionBlob [sha256.Size]byte

	// FailCode stores the code why a particular payment was canceled.
	FailCode lnwire.FailCode

	// LogEntryIndex is the log entry number that his HTLC update has
	// within the log. Depending on if IsIncoming is true, this is either
	// an entry the remote party added, or one that we added locally.
	LogEntryIndex uint64

	closeCircuitDesc
}

func (f *failMalformedEntry) LogIndex() uint64 {
	return f.LogEntryIndex
}

func (f *failMalformedEntry) ParentIndex() uint64 {
	return f.closeCircuitDesc.ParentIndex
}

func (f *failMalformedEntry) IsForwarded() bool {
	return f.Forwarded
}

func (f *failMalformedEntry) MarkForwarded() {
	f.Forwarded = true
}

func (f *failMalformedEntry) RemoveHeightLocal() uint64 {
	return f.removeCommitHeightLocal
}

func (f *failMalformedEntry) RemoveHeightRemote() uint64 {
	return f.removeCommitHeightRemote
}

func (f *failMalformedEntry) SetRemoveHeightRemote(height uint64) {
	f.removeCommitHeightRemote = height
}

func (f *failMalformedEntry) SetRemoveHeightLocal(height uint64) {
	f.removeCommitHeightLocal = height
}

var _ LogEntry = (*failMalformedEntry)(nil)
var _ ChildLogEntry = (*failMalformedEntry)(nil)

type updateFeeEntry struct {
	LogEntryIndex uint64

	FeeRate chainfee.SatPerKWeight

	removeCommitHeightRemote uint64
	removeCommitHeightLocal  uint64

	addCommitHeightRemote uint64
	addCommitHeightLocal  uint64
}

func (u *updateFeeEntry) LogIndex() uint64 {
	return u.LogEntryIndex
}

func (u *updateFeeEntry) IsForwarded() bool {
	// This update type neve rgets forwarded.
	//
	// TODO(roasbeef): create new MultiHopLogEntry interface?
	return false
}

func (u *updateFeeEntry) MarkForwarded() {
}

var _ LogEntry = (*updateFeeEntry)(nil)
